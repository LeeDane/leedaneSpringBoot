<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致
	
 -->
<mapper namespace="com.cn.leedane.mapper.circle.CircleMemberMapper">

	<!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->  

	<select id="getMember" parameterType="int" resultMap="objectBean">
		select cm.id , cm.status, cm.member_id, cm.circle_id, cm.role_type, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time, cm.create_user_id, cm.member_recommend, cm.member_score
		from t_circle_member cm 
		where cm.member_id = #{memberId} and cm.circle_id = #{circleId} and cm.status = #{status} limit 1
	</select>
	
	<resultMap type="com.cn.leedane.model.circle.CircleMemberBean" id="objectBean">
        <id property="id" column="id"/>
        <result property="status" column="status"/>
         <result property="circleId" column="circle_id"/>
        <result property="memberId" column="member_id"/>
        <result property="roleType" column="role_type"/>
        <result property="memberScore" column="member_score"/>
        <result property="memberRecommend" column="member_recommend"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createTime" column="create_time"/>
   </resultMap>
   
   <select id="getMembersByRoleType" parameterType="int" resultType="java.util.Map">
		select cm.id , cm.member_id, cm.circle_id, cm.role_type, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time, cm.create_user_id, u.account
		from t_circle_member cm inner join t_user u on u.id = cm.member_id
		where cm.circle_id = #{circleId} and cm.status = #{status} and cm.role_type = #{roleType}
	</select>
	
	<select id="getAllMembers" parameterType="int" resultType="java.util.Map">
		select cm.id , cm.member_id, cm.circle_id, cm.role_type, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time, cm.create_user_id, u.account
		from t_circle_member cm inner join t_user u on u.id = cm.member_id
		where cm.circle_id = #{circleId} and cm.status = #{status}
	</select>
	
	<select id="findByMemberIds" resultMap="objectBean">
		select cm.id , cm.member_id, cm.circle_id, cm.role_type, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time, cm.create_user_id
		from t_circle_member cm 
		where cm.circle_id = #{circleId} and cm.status = #{status} and member_id in 
		<foreach collection="memberIds" item="memberId" index="index"
            open="(" close=")" separator=",">
            #{memberId}
        </foreach>
	</select>
	
	<update id="updateByBatch">
	    update t_circle_member set role_type = #{roleType}
	    where circle_id = #{circleId} and id in 
	    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">    
           #{item.id, jdbcType=INTEGER}
	    </foreach>
    </update>
    
    <select id="paging" parameterType="int" resultType="java.util.Map">
		select cm.id, cm.status, cm.circle_id, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time, cm.member_id,
		cm.role_type, cm.member_recommend, (select cc.total_score from t_circle_contribution cc where cc.create_user_id = cm.member_id and cc.circle_id = #{circleId} order by cc.id desc limit 1) contribute
		from t_circle_member cm 
		where cm.circle_id = #{circleId} and cm.status = #{status}
		order by cm.create_time desc, cm.id desc limit #{start}, #{pageSize}
	</select>
	
    <select id="calculateHotests" resultType="java.util.Map" statementType="CALLABLE">
		{
			call calculateHostestCircleMembersProcedure(#{circleId})
		}
	</select>
	
	<select id="getHotests" resultType="java.util.Map">
		select cm.id, cm.member_id, cm.status, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle_member cm 
		where cm.circle_id = #{circleId} and cm.status = #{status} and cm.create_time > #{time} order by cm.member_score desc limit 0, #{pageSize};
	</select>
	
	<select id="getNewests" parameterType="int" resultType="java.util.Map">
		select cm.id, cm.member_id, cm.status, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle_member cm 
		where cm.circle_id = #{circleId} and cm.status = #{status} order by cm.id desc limit 0, #{pageSize};
	</select>
	
	<select id="getRecommends" parameterType="int" resultType="java.util.Map">
		select cm.id, cm.member_id, cm.status, date_format(cm.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle_member cm 
		where cm.circle_id = #{circleId} and cm.status = #{status} and cm.member_recommend = true order by cm.id desc limit 0, #{pageSize};
	</select>
</mapper>