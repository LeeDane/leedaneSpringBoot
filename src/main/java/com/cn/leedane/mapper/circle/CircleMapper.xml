<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致
	
 -->
<mapper namespace="com.cn.leedane.mapper.circle.CircleMapper">

	<!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->  
	<select id="getAllCircles" parameterType="int" resultMap="objectBean">
		select c.id id, c.name name, c.circle_desc, c.circle_path, c.create_user_id, date_format(c.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle c inner join t_circle_member cm on c.id = cm.circle_id where cm.member_id = #{createUserId} and c.status = #{status} order by c.id desc
	</select>
	
	<select id="isExists" resultType="java.util.Map">
		select c.id, c.name name, c.circle_desc, c.circle_path, c.status, date_format(c.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle c where c.name = #{name} limit 1
	</select>
	
	<resultMap type="com.cn.leedane.model.circle.CircleBean" id="objectBean">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="circleDesc" column="circle_desc"/>
        <result property="status" column="status"/>
        <result property="circlePath" column="circle_path"/>
        <result property="circleScore" column="circle_score"/>
        <result property="circleRecommend" column="circle_recommend"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createTime" column="create_time"/>
   </resultMap>

	<select id="paging" parameterType="int" resultType="java.util.Map">
		select c.id, c.status, c.circle_desc, c.name, c.circle_path, 
			date_format(c.create_time,'%Y-%m-%d %H:%i:%s') create_time 
			, c.create_user_id, (select GROUP_CONCAT(cm1.member_id) from t_circle_member cm1 where c.id = cm1.circle_id and cm1.`status` = #{status} and cm1.role_type = #{roleType}) admins
		from t_circle c inner join t_circle_member cm on c.id = cm.circle_id 
		where cm.member_id = #{createUserId} and cm.status = #{status} and c.status = #{status}
		order by c.create_time desc, c.id desc limit #{start}, #{pageSize}
	</select>
	
	<select id="calculateCircleHotests" resultType="java.util.Map" statementType="CALLABLE">
		{
			call calculateHostestCirclesProcedure(#{time}, #{pageSize})
		}
	</select>
	
	<!-- 获取热门的圈子 -->
	<select id="getHotests" resultMap="objectBean">
		{
			call getHostestCirclesProcedure(#{time}, #{pageSize} ,#{status})
		}
	</select>
	
	<select id="getNewests" parameterType="int" resultMap="objectBean">
		select c.id, c.name name, c.circle_desc, c.circle_path, c.status, date_format(c.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle c inner join t_circle_setting cs on cs.circle_id = c.id 
		where c.status = #{status} and cs.status = 1 order by c.id desc limit 0, #{pageSize};
	</select>
	
	<select id="getRecommends" parameterType="int" resultMap="objectBean">
		select c.id, c.name name, c.circle_desc, c.circle_path, c.status, date_format(c.create_time,'%Y-%m-%d %H:%i:%s') create_time
		from t_circle c inner join t_circle_setting cs on cs.circle_id = c.id 
		where c.status = #{status} and cs.status = 1 and c.circle_recommend = true order by c.id desc limit 0, #{pageSize};
	</select>
</mapper>